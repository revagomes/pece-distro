<?php

/**
 * @file
 * Code for the PECE Demo.
 */

/**
 * Implements hook_menu().
 */
function pece_demo_menu() {
  $items = array();

  $items['admin/config/development/pece/demo'] = array(
    'title' => 'PECE Demo',
    'description' => 'Administer demo content.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('pece_demo_form'),
    'access arguments' => array('access devel information'),
    'type' => MENU_NORMAL_ITEM,
   );

  return $items;
}

/**
 * Form for generating/deleting demo content.
 */
function pece_demo_form($form, $form_state) {
  $form = array();

  $form['generate'] = array(
    '#type' => 'fieldset',
    '#title' => t('Generate demo content'),
    '#description' => t('Users, taxonomy terms, and contents are going to be created by this action.') .
      '<br>' . t('<i>It is currently not possible to revert this.</i>'),
  );

  $form['generate']['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Generate'),
    '#submit' => array('pece_demo_generate_demo_content'),
  );

  $form['delete'] = array(
    '#type' => 'fieldset',
    '#title' => t('Delete demo content'),
    '#description' => t('Delete previously created demo content.') .
      '<br>' . t('<i>This is currently not possible.</i>'),
  );

  $form['delete']['cancel'] = array(
    '#type' => 'submit',
    '#value' => t('Delete'),
    '#disabled' => TRUE,
    '#submit' => array('pece_demo_delete_demo_content'),
  );

  return $form;
}

/**
 * Generate PECE demo contents.
 */
function pece_demo_generate_demo_content() {
  $path = drupal_get_path('module', 'devel_generate');
  require_once($path .'/devel_generate.inc');

  $timeback = 604800; // 1 week.


  // Generate users.
  // ------------------------------------------------------

  $roles = array('Contributor' => 5, 'Researcher' => 5);

  foreach ($roles as $role_name => $amount) {
    $role = user_role_load_by_name($role_name);
    devel_create_users($amount, FALSE, $timeback, array($role->rid), 'demo');
    drupal_set_message(t('Generated @amount users of role !role.', array(
      '@amount' => $amount,
      '!role' => $role_name,
    )), 'status');
  }

  pece_demo_ensure_role_named_users();


  // Generate vocabulary terms.
  // ------------------------------------------------------

  $vocabularies = array('pece_tags' => 40, 'pece_structured_analytics' => 10);

  foreach ($vocabularies as $vocabulary_name => $amount) {
    if ($vocabulary = taxonomy_vocabulary_machine_name_load($vocabulary_name)) {
      $new_terms = devel_generate_terms($amount, array($vocabulary->vid => $vocabulary), '12');
      if (!empty($new_terms)) {
        drupal_set_message(t('Generated the following new terms on the !vocabulary vocabulary: !terms', array(
          '!terms' => implode(',', $new_terms),
          '!vocabulary' => $vocabulary->name,
        )), 'status');
      }
    }
  }


  // Generate content.
  // ------------------------------------------------------

  $content_types = array(
    'pece_group' => 6,
    'pece_analytic' => 10,
    'pece_fieldsite' => 10,
    'pece_artifact_text' => 10,
    'pece_artifact_image' => 10,
    'pece_artifact_audio' => 10,
    'pece_artifact_video' => 10,
    'pece_artifact_fieldnote' => 10,
    'pece_memo' => 10,
    'frontpage_image_slideshow' => 3,
    'pece_photo_essay' => 10,
    'pece_essay' => 10,
  );

  $content_types_info = node_type_get_types();

  foreach ($content_types as $content_type => $amount) {
    if (isset($content_types_info[$content_type])) {
      $config = array('values' => array(
        'title_length' => 6,
        'num_nodes' => $amount,
        'max_comments' => 0,
        'node_types' => array($content_type => $content_type),
      ));

      devel_generate_content($config);

      drupal_set_message(t('Generated @num_nodes nodes of type !type.', array(
        '@num_nodes' => $amount,
        '!type' => $content_types_info[$content_type]->name,
      )), 'status');
    }
  }

  drupal_set_message(t('Finished generating PECE demo content.'), 'status');
}

/**
 * Delete PECE demo contents.
 */
function pece_demo_delete_demo_content() {
  drupal_set_message(t('Deleting demo content automatically is currently not possible.'), 'warning');
}

/**
 * Make sure one user of each role has as username the role name itself. Also,
 * force a default user password of 'password'.
 */
function pece_demo_ensure_role_named_users() {
  $users = entity_load('user');
  $used_uids = array();
  $roles = user_roles(TRUE);
  $ignored_roles = array(
    'authenticated user',
  );

  foreach (array_diff($roles, $ignored_roles) as $rid => $role) {
    $found = FALSE;

    foreach ($users as $user) {
      if ($user->uid !== 1 && !in_array($user->uid, $used_uids) && in_array($role, $user->roles)) {
        $found = TRUE;
        break;
      }
    }

    if ($found) {
      $used_uids[] = $user->uid;
      $user->name = preg_replace('@[^a-z0-9-]+@','_', strtolower($role));
      user_save($user, array('pass' => 'password'));
    }
  }
}
